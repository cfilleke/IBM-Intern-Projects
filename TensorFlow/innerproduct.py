# -*- coding: utf-8 -*-
"""dotproduct.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-hqnrw0dEbskFR-8FpMbfehwfNOoyKO3
"""

import numpy as np
import random
import tensorflow as tf
import keras

def vector_dot_scratch(a,b):

  # The value is -1 if vectors have different shapes (lengths).
  if(np.shape(a) != np.shape(b)):
     c = -1
  else:
    c = 0
    for i in range(np.array(a).size):
      c += a[i-1]*b[i-1]
  return c

num_train_data = 7000
num_test_data = 3000

train_data = [0]*num_train_data
train_target = [0]*num_train_data
for i in range(num_train_data):
  a = [random.randint(1,2) for x in range(2)]
  b = [random.randint(1,2) for x in range(2)]
  train_data[i] = [a, b]
  train_target[i] = vector_dot_scratch(a,b)
 
print(train_data)
print(train_target)

test_data = [0]*num_test_data
test_target = [0]*num_test_data
for i in range(num_test_data):
  a = [random.randint(1,2) for x in range(2)]
  b = [random.randint(1,2) for x in range(2)]
  test_data[i] = [a, b]
  test_target[i] = vector_dot_scratch(a,b)


model = keras.Sequential([
    keras.layers.Flatten(input_shape=(2,2)),
    keras.layers.Dense(2, activation='sigmoid'),
    keras.layers.Dense(1)
])

model.compile(optimizer='adam', 
              loss='mse',
              metrics=['mae'])

model.fit(train_data, train_target, epochs=10, batch_size=1)

test_loss, test_acc = model.evaluate(test_data, test_target)
print('Test accuracy:', test_acc)
a= np.array([[[2,2],[2,2]]])
print(model.predict(a))